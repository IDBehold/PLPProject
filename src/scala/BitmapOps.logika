import org.sireum.logika._

def midpoint(x0: Z, y0: Z, radius: Z):Unit = {
    var f:Z = 1 - radius
    var ddFx:Z = 1
    var ddFy:Z = -2 * radius
    var x:Z = 0
    var y:Z = radius

    while (x < y) {
    l"""{ modifies x, y, ddFy, ddFx, f } """
      if (f >= 0) {
      l"""{ 1.f >= 0 premise }"""

        y = y-1
        l"""{
        1.y == y_old - 1 premise
        2.y_old == y + 1 algebra 1
        }"""

        ddFy = ddFy + 2
        l"""{
        1.ddFy == ddFy_old + 2 premise
        2.ddFy_old + 2 == ddFy algebra 1
        }"""

        f = f + ddFy
        l"""{
        1.f == f_old + ddFy premise
        2.f_old + ddFy == f algebra 1
        }"""
      }
      x = x+1
      l"""{
        1.x == x_old +1 premise
        2.x_old == x - 1 algebra 1
      }"""
      ddFx = ddFx + 2
      l"""{
        1.ddFx == ddFx_old +2 premise
        2.ddFx_old == ddFx - 2 algebra 1
      }"""
      f = f + ddFx
      l"""{
        1.f == f_old + ddFx premise
        2.f_old == f - ddFx algebra 1
      }"""
    }
}